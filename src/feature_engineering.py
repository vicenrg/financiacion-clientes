
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# =============================================================
# üéØ Funci√≥n: crear_variable_objetivo
# -------------------------------------------------------------
# ‚û§ Crea la variable binaria 'target' a partir de 'estado'
# ‚û§ Devuelve el DataFrame actualizado y la serie objetivo
# ‚û§ Incluye explicaci√≥n detallada de qu√© categor√≠as se consideran impago
# =============================================================
def crear_variable_objetivo(df: pd.DataFrame, col_estado: str = "estado") -> tuple:
    """
    Crea una variable binaria 'target' a partir de la columna 'estado'.

    Mapeo:
    - 1 = impago (alto riesgo): incluye casos como 'Charged Off', 'Default', etc.
    - 0 = no impago (cliente pagador): el resto de categor√≠as.

    Args:
        df (pd.DataFrame): DataFrame de entrada con la columna 'estado'
        col_estado (str): Nombre de la columna que contiene el estado del pr√©stamo

    Returns:
        df_actualizado (pd.DataFrame): DataFrame sin la columna original y con 'target'
        target (pd.Series): Serie con la variable objetivo binaria
    """

    df = df.copy()

    # Valores considerados como impago
    valores_impago = [
        "Charged Off",
        "Does not meet the credit policy. Status:Charged Off",
        "Default"
    ]

    # Mostrar resumen de categor√≠as
    print("\nüìä Categor√≠as √∫nicas en columna de estado:")
    print(df[col_estado].value_counts(dropna=False))

    # Mostrar explicaci√≥n del criterio
    print("\nüìå Categorizaci√≥n de 'estado' ‚Üí 'target':")
    print("‚û° Se asigna target = 1 (impago) a:")
    for v in valores_impago:
        print(f"  - {v}")
    print("‚û° Todas las dem√°s se consideran NO impago (target = 0)")

    # Crear columna target
    df["target"] = np.where(df[col_estado].isin(valores_impago), 1, 0)

    # Verificaci√≥n de resultados
    print("\n‚úÖ Distribuci√≥n de 'target':")
    print(df["target"].value_counts().sort_index())
    print("Valores nulos:", df["target"].isna().sum())
    print(f"üìå Porcentaje de impagos: {df['target'].mean() * 100:.2f}%")

    # Eliminar columna original
    df.drop(columns=col_estado, inplace=True)

    # Mostrar el DataFrame resultante si se indica
    print("\nüìã Vista previa del DataFrame actualizado (sin 'estado', con 'target'):")
    display(df)

    return df, df["target"]


# =============================================================
# üéØ Funci√≥n: agrupar_categorias
# -------------------------------------------------------------
# ‚û§ Verifica si hay valores nulos en la variable de entrada
# ‚û§ Agrupa categor√≠as con frecuencia < criterio (%) bajo 'OTROS'
# ‚û§ Muestra gr√°fico de frecuencias absolutas y relativas
# ‚û§ Permite usar 'criterio' en porcentaje, m√°s intuitivo (ej: 0.5 = 0.5%)
# =============================================================
def agrupar_categorias(variable: pd.Series, criterio: float = 5.0) -> pd.Series:
    """
    Agrupa las categor√≠as poco frecuentes de una variable categ√≥rica bajo la etiqueta 'OTROS',
    y muestra un gr√°fico de barras con frecuencias absolutas y relativas.

    Par√°metros:
    -----------
    variable : pd.Series
        Variable categ√≥rica a procesar.
    criterio : float
        Umbral m√≠nimo de frecuencia en porcentaje. 
        Ej: criterio=0.5 agrupa las categor√≠as con <0.5% frecuencia.
    
    Retorna:
    --------
    pd.Series
        Variable transformada con categor√≠as raras agrupadas.
    """
    if variable.isnull().any():
        raise ValueError("La variable contiene valores nulos. Imputar antes de agrupar categor√≠as.")
    else:
        print("‚úÖ Valores nulos: 0")

    # Convertir criterio de porcentaje a proporci√≥n
    criterio_proporcion = criterio / 100

    frecuencias = variable.value_counts(normalize=True)
    categorias_raras = frecuencias[frecuencias < criterio_proporcion].index
    variable_agrupada = np.where(variable.isin(categorias_raras), 'OTROS', variable)
    variable_agrupada = pd.Series(variable_agrupada, index=variable.index)

    # Crear nuevo conteo tras agrupar
    conteo_abs = variable_agrupada.value_counts()
    conteo_rel = variable_agrupada.value_counts(normalize=True) * 100

    # Gr√°fico
    plt.figure(figsize=(10, 5))
    barras = plt.bar(conteo_abs.index, conteo_rel, alpha=0.7)

    # Etiquetas con valor absoluto y porcentaje
    for i, categoria in enumerate(conteo_abs.index):
        valor_abs = conteo_abs[categoria]
        valor_pct = conteo_rel[categoria]
        plt.text(i, valor_pct + 0.5, f"{valor_abs}\n({valor_pct:.1f}%)", ha='center', va='bottom', fontsize=9)

    plt.title(f"Distribuci√≥n de categor√≠as en variable '{variable.name}'", fontsize=14)
    plt.xlabel("Categor√≠as")
    plt.ylabel("Frecuencia relativa (%)")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.show()

    return variable_agrupada



# =============================================================
# üéØ Funci√≥n: reagrupar_categorias_existente
# -------------------------------------------------------------
# ‚û§ Verifica si hay valores nulos en la variable de entrada
# ‚û§ Agrupa categor√≠as con frecuencia < criterio (%) dentro de una categor√≠a ya existente
# ‚û§ Lanza error si la categor√≠a destino no existe
# ‚û§ Muestra gr√°fico de barras con frecuencias absolutas y relativas tras la reagrupaci√≥n
# =============================================================
def reagrupar_categorias_existente(variable: pd.Series, criterio: float, categoria_objetivo: str) -> pd.Series:
    """
    Reasigna las categor√≠as con frecuencia menor a un umbral a una categor√≠a ya existente.
    Muestra un gr√°fico de barras tras la transformaci√≥n.

    Par√°metros:
    -----------
    variable : pd.Series
        Variable categ√≥rica a procesar.
    criterio : float
        Umbral m√≠nimo de frecuencia en porcentaje. 
        Ej: criterio=1 agrupa las categor√≠as con <1% frecuencia.
    categoria_objetivo : str
        Categor√≠a existente a la que se reasignar√°n las categor√≠as poco frecuentes.

    Retorna:
    --------
    pd.Series
        Variable transformada con categor√≠as raras reasignadas a la categor√≠a objetivo.
    """
    if variable.isnull().any():
        raise ValueError("‚ùå La variable contiene valores nulos. Imputar antes de reagrupar.")
    else:
        print("‚úÖ Valores nulos: 0")

    if categoria_objetivo not in variable.unique():
        raise ValueError(f"‚ùå La categor√≠a objetivo '{categoria_objetivo}' no existe en la variable.")

    # Convertir criterio de porcentaje a proporci√≥n
    criterio_proporcion = criterio / 100

    # Identificar categor√≠as poco frecuentes
    frecuencias = variable.value_counts(normalize=True)
    categorias_a_reagrupar = frecuencias[frecuencias < criterio_proporcion].index

    # Reagrupar en la categor√≠a objetivo
    variable_reagrupada = variable.apply(lambda x: categoria_objetivo if x in categorias_a_reagrupar else x)
    variable_reagrupada = pd.Series(variable_reagrupada, index=variable.index)

    # Nuevo conteo
    conteo_abs = variable_reagrupada.value_counts()
    conteo_rel = variable_reagrupada.value_counts(normalize=True) * 100

    # Gr√°fico
    plt.figure(figsize=(10, 5))
    barras = plt.bar(conteo_abs.index, conteo_rel, alpha=0.7)

    for i, categoria in enumerate(conteo_abs.index):
        valor_abs = conteo_abs[categoria]
        valor_pct = conteo_rel[categoria]
        plt.text(i, valor_pct + 0.5, f"{valor_abs}\n({valor_pct:.1f}%)", ha='center', va='bottom', fontsize=9)

    plt.title(f"Distribuci√≥n tras reagrupar en '{categoria_objetivo}'", fontsize=14)
    plt.xlabel("Categor√≠as")
    plt.ylabel("Frecuencia relativa (%)")
    plt.xticks(rotation=45)
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()

    return variable_reagrupada



# =============================================================
# üî∑ Funci√≥n: codificar_one_hot
# -------------------------------------------------------------
# ‚û§ Aplica One-Hot Encoding a variables nominales en el DataFrame `cat`
# ‚û§ Usa scikit-learn con drop=None (conserva todas las categor√≠as)
# ‚û§ Compatible con regresi√≥n log√≠stica regularizada y modelos de √°rboles
# ‚û§ handle_unknown='ignore' evita errores si aparecen nuevas categor√≠as en producci√≥n
# =============================================================

from sklearn.preprocessing import OneHotEncoder

def codificar_one_hot(cat: pd.DataFrame, variables: list) -> pd.DataFrame:
    """
    Aplica One-Hot Encoding a variables nominales sin eliminar columnas dummy.

    Args:
        cat (pd.DataFrame): DataFrame con variables categ√≥ricas y target.
        variables (list): Lista de columnas nominales a codificar.

    Returns:
        pd.DataFrame: DataFrame con variables codificadas y originales eliminadas.
    """
    cat = cat.copy()

    # Configurar codificador con scikit-learn
    ohe = OneHotEncoder(drop=None, handle_unknown='ignore', sparse_output=False)

    # Transformar y obtener nombres de columnas codificadas
    codificado = ohe.fit_transform(cat[variables])
    columnas_codificadas = ohe.get_feature_names_out(variables)

    # Crear DataFrame de las columnas codificadas
    df_codificado = pd.DataFrame(codificado, columns=columnas_codificadas, index=cat.index)

    # Reemplazar columnas originales por las codificadas
    cat.drop(columns=variables, inplace=True)
    cat = pd.concat([cat, df_codificado], axis=1)

    return cat



# =============================================================
# üü¢ Funci√≥n: codificar_ordinal
# -------------------------------------------------------------
# ‚û§ Aplica codificaci√≥n ordinal con scikit-learn a m√∫ltiples variables
# ‚û§ Usa el orden definido por el usuario (una lista por variable)
# ‚û§ Elimina las columnas originales y a√±ade las columnas codificadas
# =============================================================

from sklearn.preprocessing import OrdinalEncoder

def codificar_ordinal(cat: pd.DataFrame, variables: list, categorias_ordenadas: list) -> pd.DataFrame:
    """
    Codifica m√∫ltiples variables ordinales en el DataFrame `cat` con orden expl√≠cito.

    Args:
        cat (pd.DataFrame): DataFrame con variables categ√≥ricas y target.
        variables (list): Lista de columnas ordinales a codificar.
        categorias_ordenadas (list): Lista de listas con el orden por variable.

    Returns:
        pd.DataFrame: DataFrame actualizado con columnas ordinales codificadas.
    """
    cat = cat.copy()

    # Validaci√≥n
    if len(variables) != len(categorias_ordenadas):
        raise ValueError("‚ùå La cantidad de variables no coincide con la cantidad de listas de orden.")

    # Codificador ordinal con orden definido
    oe = OrdinalEncoder(categories=categorias_ordenadas)
    codificado = oe.fit_transform(cat[variables])

    columnas_codificadas = [f"{var}_ord" for var in variables]
    df_codificado = pd.DataFrame(codificado, columns=columnas_codificadas, index=cat.index)

    # Eliminar originales y a√±adir codificadas
    cat.drop(columns=variables, inplace=True)
    cat = pd.concat([cat, df_codificado], axis=1)

    return cat



# =============================================================
# ‚öñÔ∏è Funci√≥n: escalar_variables_numericas
# -------------------------------------------------------------
# ‚û§ Aplica MinMaxScaler solo a las variables seleccionadas
# ‚û§ Ignora las que no existan en el DataFrame
# ‚û§ Devuelve el DataFrame actualizado
# =============================================================

from sklearn.preprocessing import MinMaxScaler

def escalar_variables_numericas(num: pd.DataFrame, variables_a_escalar: list) -> pd.DataFrame:
    """
    Escala las variables num√©ricas seleccionadas usando MinMaxScaler.

    Args:
        num (pd.DataFrame): DataFrame num√©rico original
        variables_a_escalar (list): Lista de columnas a escalar

    Returns:
        pd.DataFrame: DataFrame con variables escaladas
    """
    num = num.copy()
    scaler = MinMaxScaler()

    columnas_presentes = [col for col in variables_a_escalar if col in num.columns]
    num[columnas_presentes] = scaler.fit_transform(num[columnas_presentes])

    return num


